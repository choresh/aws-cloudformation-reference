AWSTemplateFormatVersion: 2010-09-09
Description: CI/CD pipeline for serverless API

Parameters:
  GithubOauthToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: github-oauth-token
    NoEcho: true
  CodePipelineS3BucketName:
    Type: String
    Default: codepipeline-bucket-thomasstep
  EcsClusterStack:
    Type: String
    Default: ecs-stack
  FargateStack:
    Type: String
    Default: fargate-stack


Resources:
  EcrRepo:
    Type: AWS::ECR::Repository

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CodePipelineS3BucketName

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                  Service:
                    - codepipeline.amazonaws.com
              Action:
                - sts:AssumeRole
      Description: IAM Role for CodePipeline
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Principal:
                  Service:
                    - codebuild.amazonaws.com
              Action:
                - sts:AssumeRole
      Description: IAM Role for CodeBuild
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess # To download/upload artifacts to CodePipeline
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      # Policies:
      #   - PolicyName: root
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - ecr:GetAuthorizationToken
      #           Resource: '*'

  CodePipeline:
    DependsOn: CodePipelineArtifactBucket
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodePipelineS3BucketName
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: Ingress
          Actions:
            - InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Owner: ThirdParty
                Category: Source
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
              Configuration:
                Owner: thomasstep
                Repo: aws-cloudformation-reference
                PollForSourceChanges: 'true'
                Branch: master
                OAuthToken: !Ref GithubOauthToken
              Name: ApplicationSource
        -
          Name: Build
          Actions:
            - Name: BuildDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref CodeBuild
                PrimarySource: SourceArtifact
                EnvironmentVariables: !Sub '[{"name":"ECR_REPOSITORY_URI","value":"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepo}","type":"PLAINTEXT"},{"name":"ECR_LOGIN_URL","value":"${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com","type":"PLAINTEXT"}]'
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
        -
          Name: Deploy
          Actions:
            - Name: DeployImage
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              RunOrder: 1
              Configuration:
                ClusterName:
                  Fn::ImportValue: !Sub ${EcsClusterStack}-ecs-cluster
                ServiceName:
                  Fn::ImportValue: !Sub ${FargateStack}-fargate-service-name
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: BuildArtifact

  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Sub /aws/codebuild/${CodeBuild}

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Description: CodeBuild for Fargate
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: fargate/hello-world/buildspec.yml
      TimeoutInMinutes: 10